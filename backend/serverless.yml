# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: sridhar1030
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: rekognition
# "service" is the name of this project. This will also be added to your AWS resource names.
service: backend

provider:
  name: aws
  runtime: nodejs20.x
  # region: ap-south-1  # Specify the AWS region here
  environment:
    BUCKET_NAME: backend-public-photos-dev-default
    DYNAMODB_TABLE: backend-photos-dev-default
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:*"
          Resource: "arn:aws:s3:::backend-public-photos-dev-default"
        - Effect: "Allow"
          Action:
            - "rekognition:detectLabels"
            - "rekognition:recognizeCelebrities"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            # scan query and update
            - "dynamodb:Query"
            - "dynamodb:Scan"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource: "arn:aws:dynamodb::: ${self:service}-photos-${sls:stage}-${opt:uniqueSuffix, 'default'}"

functions:
  savePhoto:
    handler: functions/savePhoto.savePhoto
    events:
      - httpApi:
          path: /
          method: post
  getPhotos:
    handler: functions/getPhotos.getPhotos
    events:
      - httpApi:
          path: /
          method: get
  celebrityRecognition:
    handler: functions/celeb.celeb
    events:
      - httpApi:
          path: /celebrity
          method: post

  helloWorld:
    handler: functions/savePhoto.helloWorld
    events:
      - httpApi:
          path: /hello
          method: get

resources:
  Resources:
    PhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-photos-${sls:stage}-${opt:uniqueSuffix, 'default'}
        AttributeDefinitions:
          - AttributeName: primary_key
            AttributeType: S
        KeySchema:
          - AttributeName: primary_key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-public-photos-${sls:stage}-${opt:uniqueSuffix, 'default'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    PhotoBucketAllowPublicReadPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PhotoBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
              Resource:
                - !Join ['/', [!GetAtt PhotoBucket.Arn, '*']]
              Principal: "*"
            - Effect: Allow
              Action:
                - "s3:PutObject"
              Resource:
                - !Join ['/', [!GetAtt PhotoBucket.Arn, '*']]
              Principal: "*"



plugins:
  - serverless-offline

